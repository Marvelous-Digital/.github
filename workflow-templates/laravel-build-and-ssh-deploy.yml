# Required variables in order for this workflow to work
#
# environment:
# - create an environment for your branch production in github in order to have multiple deploy scripts with different variables
#
# vars:
# - WEBSITE_DIRECTORY (environment): home of the website on the server from the root (ex: sites/my-website.com/)
# - CHAT_KEY (organisation): google space api key. (for Marvelous-Digital, this value is already set at an organisation level, but can be overridden at a repo level if needed)
#
# secrets:
# - MRVLS_PRIVATE_REPO_KEY (organisation): for Marvelous-Digital, this value is already on the orgs repo
# - COMPOSER_AUTH_JSON (repository): the content of the auth.json
# - SSH_HOST (repository): the host of the ssh server
# - SSH_USER (repository): the user of the ssh connection
# - SSH_PASSWORD (repository): the ssh users password
# - SSH_PORT (repository): the port of the ssh connection
  
# Make sure you also have the run-MY_BRANCH.sh file on the server

name: Deploy a laravel application on a standard host using ssh

on:
  push:
    branches: ["MY_BRANCH"] # TODO: change this to the branch that needs to be deployed (ex: staging or production)

env:
  WEBSITE_DIRECTORY: ${{ vars.WEBSITE_DIRECTORY }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    environment: "MY_ENVIRONEMENT"
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "true"
          ssh-key: ${{ secrets.MRVLS_PRIVATE_REPO_KEY }}

      # TODO: Remove if not needed
      - name: Add HTTP basic auth credentials
        run: echo '${{ secrets.COMPOSER_AUTH_JSON }}' > $GITHUB_WORKSPACE/auth.json

      - name: Install composer
        uses: php-actions/composer@v6
        with:
          php_version: "8.2"
          version: "2.6.6"
          args: "--no-scripts"

      - name: npm install
        run: npm install

      - name: npm run build
        run: npm run build

      - name: Copy files via ssh
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: "app/*, bootstrap/*, config/*, database/*, public/*, resources/*, routes/*, storage/app/*, artisan, components.json, composer.json, composer.lock, package.json, phpunit.xml, run-production.sh, run-staging.sh, yarn.lock" # TODO: modify to your needs, adapt run scripts. Use inclusions only, exclusions aren't possible
          target: ${{ env.WEBSITE_DIRECTORY }}

      - name: Composer install via ssh
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: "cd ${{ env.WEBSITE_DIRECTORY }} && bash run-MY_BRANCH.sh" # TODO: change the run script if different

      - name: google chat notifications
        uses: SimonScholz/google-chat-action@main
        with:
          title: WEBSITE NAME # TODO
          subtitle: "production" # TODO
          webhookUrl: "${{ vars.CHAT_KEY }}"
          jobStatus: "${{ job.status }}"
          imageUrl: https://example.com/web-app-manifest-512x512.png # TODO
          imageType: SQUARE
